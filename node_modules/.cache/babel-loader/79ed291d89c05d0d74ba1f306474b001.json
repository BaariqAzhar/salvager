{"ast":null,"code":"import * as React from 'react';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport { getCellFixedInfo } from '../utils/fixUtil';\nimport { getColumnsKey } from '../utils/valueUtil';\n\nfunction HeaderRow(_ref) {\n  var cells = _ref.cells,\n      stickyOffsets = _ref.stickyOffsets,\n      flattenColumns = _ref.flattenColumns,\n      RowComponent = _ref.rowComponent,\n      CellComponent = _ref.cellComponent,\n      onHeaderRow = _ref.onHeaderRow,\n      index = _ref.index;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls;\n\n  var rowProps;\n\n  if (onHeaderRow) {\n    rowProps = onHeaderRow(cells.map(function (cell) {\n      return cell.column;\n    }), index);\n  }\n\n  var columnsKey = getColumnsKey(cells.map(function (cell) {\n    return cell.column;\n  }));\n  return React.createElement(RowComponent, Object.assign({}, rowProps), cells.map(function (cell, cellIndex) {\n    var column = cell.column;\n    var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets);\n    var additionalProps;\n\n    if (column && column.onHeaderCell) {\n      additionalProps = cell.column.onHeaderCell(column);\n    }\n\n    return React.createElement(Cell, Object.assign({}, cell, {\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: CellComponent,\n      prefixCls: prefixCls,\n      key: columnsKey[cellIndex]\n    }, fixedInfo, {\n      additionalProps: additionalProps\n    }));\n  }));\n}\n\nHeaderRow.displayName = 'HeaderRow';\nexport default HeaderRow;","map":{"version":3,"sources":["E:/Work/react/salvager/node_modules/rc-table/es/Header/HeaderRow.js"],"names":["React","Cell","TableContext","getCellFixedInfo","getColumnsKey","HeaderRow","_ref","cells","stickyOffsets","flattenColumns","RowComponent","rowComponent","CellComponent","cellComponent","onHeaderRow","index","_React$useContext","useContext","prefixCls","rowProps","map","cell","column","columnsKey","createElement","Object","assign","cellIndex","fixedInfo","colStart","colEnd","additionalProps","onHeaderCell","ellipsis","align","component","key","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,aAAa,GAAGF,IAAI,CAACE,aADzB;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACK,YAHxB;AAAA,MAIIC,aAAa,GAAGN,IAAI,CAACO,aAJzB;AAAA,MAKIC,WAAW,GAAGR,IAAI,CAACQ,WALvB;AAAA,MAMIC,KAAK,GAAGT,IAAI,CAACS,KANjB;;AAQA,MAAIC,iBAAiB,GAAGhB,KAAK,CAACiB,UAAN,CAAiBf,YAAjB,CAAxB;AAAA,MACIgB,SAAS,GAAGF,iBAAiB,CAACE,SADlC;;AAGA,MAAIC,QAAJ;;AAEA,MAAIL,WAAJ,EAAiB;AACfK,IAAAA,QAAQ,GAAGL,WAAW,CAACP,KAAK,CAACa,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAC/C,aAAOA,IAAI,CAACC,MAAZ;AACD,KAFsB,CAAD,EAElBP,KAFkB,CAAtB;AAGD;;AAED,MAAIQ,UAAU,GAAGnB,aAAa,CAACG,KAAK,CAACa,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACvD,WAAOA,IAAI,CAACC,MAAZ;AACD,GAF8B,CAAD,CAA9B;AAGA,SAAOtB,KAAK,CAACwB,aAAN,CAAoBd,YAApB,EAAkCe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,QAAlB,CAAlC,EAA+DZ,KAAK,CAACa,GAAN,CAAU,UAAUC,IAAV,EAAgBM,SAAhB,EAA2B;AACzG,QAAIL,MAAM,GAAGD,IAAI,CAACC,MAAlB;AACA,QAAIM,SAAS,GAAGzB,gBAAgB,CAACkB,IAAI,CAACQ,QAAN,EAAgBR,IAAI,CAACS,MAArB,EAA6BrB,cAA7B,EAA6CD,aAA7C,CAAhC;AACA,QAAIuB,eAAJ;;AAEA,QAAIT,MAAM,IAAIA,MAAM,CAACU,YAArB,EAAmC;AACjCD,MAAAA,eAAe,GAAGV,IAAI,CAACC,MAAL,CAAYU,YAAZ,CAAyBV,MAAzB,CAAlB;AACD;;AAED,WAAOtB,KAAK,CAACwB,aAAN,CAAoBvB,IAApB,EAA0BwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB;AACvDY,MAAAA,QAAQ,EAAEX,MAAM,CAACW,QADsC;AAEvDC,MAAAA,KAAK,EAAEZ,MAAM,CAACY,KAFyC;AAGvDC,MAAAA,SAAS,EAAEvB,aAH4C;AAIvDM,MAAAA,SAAS,EAAEA,SAJ4C;AAKvDkB,MAAAA,GAAG,EAAEb,UAAU,CAACI,SAAD;AALwC,KAAxB,EAM9BC,SAN8B,EAMnB;AACZG,MAAAA,eAAe,EAAEA;AADL,KANmB,CAA1B,CAAP;AASD,GAlBqE,CAA/D,CAAP;AAmBD;;AAED1B,SAAS,CAACgC,WAAV,GAAwB,WAAxB;AACA,eAAehC,SAAf","sourcesContent":["import * as React from 'react';\r\nimport Cell from '../Cell';\r\nimport TableContext from '../context/TableContext';\r\nimport { getCellFixedInfo } from '../utils/fixUtil';\r\nimport { getColumnsKey } from '../utils/valueUtil';\r\n\r\nfunction HeaderRow(_ref) {\r\n  var cells = _ref.cells,\r\n      stickyOffsets = _ref.stickyOffsets,\r\n      flattenColumns = _ref.flattenColumns,\r\n      RowComponent = _ref.rowComponent,\r\n      CellComponent = _ref.cellComponent,\r\n      onHeaderRow = _ref.onHeaderRow,\r\n      index = _ref.index;\r\n\r\n  var _React$useContext = React.useContext(TableContext),\r\n      prefixCls = _React$useContext.prefixCls;\r\n\r\n  var rowProps;\r\n\r\n  if (onHeaderRow) {\r\n    rowProps = onHeaderRow(cells.map(function (cell) {\r\n      return cell.column;\r\n    }), index);\r\n  }\r\n\r\n  var columnsKey = getColumnsKey(cells.map(function (cell) {\r\n    return cell.column;\r\n  }));\r\n  return React.createElement(RowComponent, Object.assign({}, rowProps), cells.map(function (cell, cellIndex) {\r\n    var column = cell.column;\r\n    var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets);\r\n    var additionalProps;\r\n\r\n    if (column && column.onHeaderCell) {\r\n      additionalProps = cell.column.onHeaderCell(column);\r\n    }\r\n\r\n    return React.createElement(Cell, Object.assign({}, cell, {\r\n      ellipsis: column.ellipsis,\r\n      align: column.align,\r\n      component: CellComponent,\r\n      prefixCls: prefixCls,\r\n      key: columnsKey[cellIndex]\r\n    }, fixedInfo, {\r\n      additionalProps: additionalProps\r\n    }));\r\n  }));\r\n}\r\n\r\nHeaderRow.displayName = 'HeaderRow';\r\nexport default HeaderRow;"]},"metadata":{},"sourceType":"module"}